/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/ZKTje5OEiX1
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/

"use client";

import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import Image from "next/image";

interface VideoInfo {
  title: string;
  description: string;
  tags: string[];
  thumbnails: {
    default: { url: string; width: number; height: number };
    medium: { url: string; width: number; height: number };
    high: { url: string; width: number; height: number };
  };
  channelTitle: string;
  publishedAt: string;
  viewCount: string;
  likeCount: string;
}

export function YoutubeInfo() {
  const [videoUrl, setVideoUrl] = useState("");
  const [videoInfo, setVideoInfo] = useState<VideoInfo | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);
    try {
      console.log("Submitting form with URL:", videoUrl);
      const response = await fetch("/api/youtube-info", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ videoUrl }),
      });
      console.log("Response status:", response.status);
      if (!response.ok) {
        const errorText = await response.text();
        console.error("Error response:", errorText);
        throw new Error(
          `Failed to fetch video info: ${response.status} ${errorText}`
        );
      }
      const data = await response.json();
      console.log("Received video info:", data);
      setVideoInfo(data);
    } catch (error) {
      console.error("Detailed error:", error);
      setError("Failed to fetch video info. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-4">
      <form onSubmit={handleSubmit} className="space-y-2">
        <Input
          placeholder="Enter YouTube video URL"
          value={videoUrl}
          onChange={(e) => setVideoUrl(e.target.value)}
        />
        <Button type="submit" disabled={isLoading}>
          {isLoading ? "Loading..." : "Get Video Info"}
        </Button>
      </form>
      {error && <p className="text-red-500">{error}</p>}
      {videoInfo && (
        <Card className="shadow-lg">
          <CardContent className="space-y-6">
            <div className="mt-6 bg-muted p-6 rounded-lg shadow-lg w-full max-w-2xl">
              <h2 className="text-2xl font-bold mb-4">YouTube Video Info</h2>
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium">Title:</h3>
                  <p>{videoInfo.title || "N/A"}</p>
                </div>
                <div>
                  <h3 className="text-lg font-medium">Thumbnail:</h3>
                  {videoInfo.thumbnails && (
                    <Image
                      src={videoInfo.thumbnails.medium.url}
                      alt={videoInfo.title}
                      width={videoInfo.thumbnails.medium.width}
                      height={videoInfo.thumbnails.medium.height}
                      className="rounded-lg"
                    />
                  )}
                </div>
                <div>
                  <h3 className="text-lg font-medium">Channel:</h3>
                  <p>{videoInfo.channelTitle || "N/A"}</p>
                </div>
                <div>
                  <h3 className="text-lg font-medium">Published At:</h3>
                  <p>
                    {new Date(videoInfo.publishedAt).toLocaleDateString() ||
                      "N/A"}
                  </p>
                </div>
                <div>
                  <h3 className="text-lg font-medium">Views:</h3>
                  <p>
                    {parseInt(videoInfo.viewCount).toLocaleString() || "N/A"}
                  </p>
                </div>
                <div>
                  <h3 className="text-lg font-medium">Likes:</h3>
                  <p>
                    {parseInt(videoInfo.likeCount).toLocaleString() || "N/A"}
                  </p>
                </div>
                <div>
                  <h3 className="text-lg font-medium">Description:</h3>
                  <p className="whitespace-pre-wrap">
                    {videoInfo.description || "N/A"}
                  </p>
                </div>
                <div>
                  <h3 className="text-lg font-medium">Tags:</h3>
                  {videoInfo.tags && videoInfo.tags.length > 0 ? (
                    <ul className="list-disc pl-6">
                      {videoInfo.tags.map((tag, index) => (
                        <li key={index}>{tag}</li>
                      ))}
                    </ul>
                  ) : (
                    <p>No tags available</p>
                  )}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
